EJERCICIOS  DE GESTI�N DE EXCEPCIONES

1. 1. Gesti�n de inventario
Enunciado: Crea una aplicaci�n de inventario donde, al intentar agregar un nuevo producto, se lance una excepci�n personalizada ProductoDuplicadoException si el producto ya existe en el inventario. Utiliza throw para lanzar la excepci�n y try/catch para manejarla en el m�todo principal.
Soluci�n:

class ProductoDuplicadoException extends Exception {
    public ProductoDuplicadoException(String mensaje) {
        super(mensaje);
    }
}

class Inventario {
    private List<String> productos = new ArrayList<>();

    public void agregarProducto(String producto) throws ProductoDuplicadoException {
        if (productos.contains(producto)) {
            throw new ProductoDuplicadoException("El producto ya existe en el inventario.");
        }
        productos.add(producto);
    }
}

public class ejemplo.Main {
    public static void main(String[] args) {
        Inventario inventario = new Inventario();
        try {
            inventario.agregarProducto("Laptop");
            inventario.agregarProducto("Laptop"); // Esto lanzar� una excepci�n
        } catch (ProductoDuplicadoException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


2. Conversi�n de moneda
Enunciado: Dise�a un programa que convierta cantidades de una moneda a otra. Si el monto ingresado es negativo, utiliza throw para lanzar una excepci�n MontoInvalidoException. Captura esta excepci�n con try/catch e informa al usuario que el monto ingresado es inv�lido.
Soluci�n:

class MontoInvalidoException extends Exception {
    public MontoInvalidoException(String mensaje) {
        super(mensaje);
    }
}

public class ConversorMoneda {
    public static double convertir(double monto) throws MontoInvalidoException {
        if (monto < 0) {
            throw new MontoInvalidoException("El monto no puede ser negativo.");
        }
        return monto * 1.1; // Conversi�n de ejemplo
    }

    public static void main(String[] args) {
        try {
            double resultado = convertir(-5);
            System.out.println("Monto convertido: " + resultado);
        } catch (MontoInvalidoException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


3. Sistema de reservas de vuelos
Enunciado: Implementa un sistema que permita reservar vuelos. Si el usuario intenta reservar un vuelo y no hay asientos disponibles, lanza una excepci�n AsientosNoDisponiblesException usando throw. Muestra un mensaje de error adecuado en la salida utilizando try/catch para capturar y gestionar la excepci�n.
Soluci�n:

class AsientosNoDisponiblesException extends Exception {
    public AsientosNoDisponiblesException(String mensaje) {
        super(mensaje);
    }
}

class Vuelo {
    private int asientosDisponibles;

    public Vuelo(int asientos) {
        this.asientosDisponibles = asientos;
    }

    public void reservarAsiento() throws AsientosNoDisponiblesException {
        if (asientosDisponibles <= 0) {
            throw new AsientosNoDisponiblesException("No quedan asientos disponibles.");
        }
        asientosDisponibles--;
        System.out.println("Asiento reservado.");
    }
}

public class ejemplo.Main {
    public static void main(String[] args) {
        Vuelo vuelo = new Vuelo(0);
        try {
            vuelo.reservarAsiento();
        } catch (AsientosNoDisponiblesException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


4. Procesamiento de archivos
Enunciado: Crea un programa que lea un archivo de texto. Si el archivo no existe, lanza una excepci�n ArchivoNoEncontradoException utilizando throw. Utiliza try/catch para manejar el error y solicitar al usuario que ingrese una ruta v�lida.
Soluci�n:

import java.io.*;

class ArchivoNoEncontradoException extends Exception {
    public ArchivoNoEncontradoException(String mensaje) {
        super(mensaje);
    }
}

public class ProcesadorArchivo {
    public static void leerArchivo(String rutaArchivo) throws ArchivoNoEncontradoException {
        File archivo = new File(rutaArchivo);
        if (!archivo.exists()) {
            throw new ArchivoNoEncontradoException("El archivo no existe.");
        }
        System.out.println("Leyendo archivo: " + rutaArchivo);
    }

    public static void main(String[] args) {
        try {
            leerArchivo("archivo_inexistente.txt");
        } catch (ArchivoNoEncontradoException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


5. Sistema bancario
Enunciado: Dise�a un programa para realizar transferencias entre cuentas bancarias. Si el saldo de la cuenta no es suficiente para completar la transferencia, lanza una excepci�n Excepciones.SaldoInsuficienteException usando throw. Utiliza try/catch para capturar la excepci�n y devolver un mensaje indicando que la transferencia no es posible debido a fondos insuficientes.
Soluci�n:

class Excepciones.SaldoInsuficienteException extends Exception {
    public Excepciones.SaldoInsuficienteException(String mensaje) {
        super(mensaje);
    }
}

class Excepciones.CuentaBancaria {
    private double saldo;

    public Excepciones.CuentaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    public void transferir(double monto) throws Excepciones.SaldoInsuficienteException {
        if (monto > saldo) {
            throw new Excepciones.SaldoInsuficienteException("Saldo insuficiente para realizar la transferencia.");
        }
        saldo -= monto;
        System.out.println("Transferencia realizada. Nuevo saldo: " + saldo);
    }
}

public class ejemplo.Main {
    public static void main(String[] args) {
        Excepciones.CuentaBancaria cuenta = new Excepciones.CuentaBancaria(100);
        try {
            cuenta.transferir(150);
        } catch (Excepciones.SaldoInsuficienteException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

