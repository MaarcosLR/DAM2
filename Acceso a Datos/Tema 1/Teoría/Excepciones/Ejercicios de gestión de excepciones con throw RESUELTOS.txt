EJERCICIOS B�SICOS DE GESTI�N DE EXCEPCIONES

Ejercicio 1:
	Crea un m�todo llamado dividir que tome dos par�metros, numerador y denominador, y lance una excepci�n de tipo ArithmeticException si el denominador es igual a cero.

public class Division {
    public static double dividir(int numerador, int denominador) {
        if (denominador == 0) {
            throw new ArithmeticException("No se puede dividir por cero");
        }
        return numerador / (double) denominador;
    }

    public static void main(String[] args) {
        System.out.println(dividir(10, 0)); // Esto lanzar� una excepci�n
    }
}
Ejercicio 2:
	Desarrolla un m�todo llamado verificarEdad que reciba un entero representando la edad de una persona. Si la edad es menor de 18 a�os, lanza una excepci�n personalizada MenorDeEdadException.

class MenorDeEdadException extends Exception {
    public MenorDeEdadException(String mensaje) {
        super(mensaje);
    }
}

public class VerificarEdad {
    public static void verificarEdad(int edad) throws MenorDeEdadException {
        if (edad < 18) {
            throw new MenorDeEdadException("El usuario es menor de edad");
        } else {
            System.out.println("Acceso permitido");
        }
    }

    public static void main(String[] args) {
        try {
            verificarEdad(16);
        } catch (MenorDeEdadException e) {
            System.out.println(e.getMessage());
        }
    }
}
Ejercicio 3:
	Implementa una clase llamada Excepciones.CuentaBancaria con un m�todo retirarDinero que tome un monto como par�metro. Si el monto es mayor que el saldo actual de la cuenta, lanza una excepci�n Excepciones.SaldoInsuficienteException.

class Excepciones.SaldoInsuficienteException extends Exception {
    public Excepciones.SaldoInsuficienteException(String mensaje) {
        super(mensaje);
    }
}

public class Excepciones.CuentaBancaria {
    private double saldo;

    public Excepciones.CuentaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    public void retirarDinero(double monto) throws Excepciones.SaldoInsuficienteException {
        if (monto > saldo) {
            throw new Excepciones.SaldoInsuficienteException("Saldo insuficiente para retirar el monto solicitado");
        }
        saldo -= monto;
        System.out.println("Retiro exitoso. Saldo restante: " + saldo);
    }

    public static void main(String[] args) {
        Excepciones.CuentaBancaria cuenta = new Excepciones.CuentaBancaria(100);
        try {
            cuenta.retirarDinero(150);
        } catch (Excepciones.SaldoInsuficienteException e) {
            System.out.println(e.getMessage());
        }
    }
}
Ejercicio 4:
	Crea un m�todo llamado verificarContrase�a que acepte una cadena de texto como par�metro y lance una excepci�n Contrase�aInvalidaException si la contrase�a no contiene al menos 8 caracteres o no tiene alg�n n�mero.

class Contrase�aInvalidaException extends Exception {
    public Contrase�aInvalidaException(String mensaje) {
        super(mensaje);
    }
}

public class VerificarContrase�a {
    public static void verificarContrase�a(String contrase�a) throws Contrase�aInvalidaException {
        if (contrase�a.length() < 8 || !contrase�a.matches(".*\\d.*")) {
            throw new Contrase�aInvalidaException("La contrase�a es inv�lida. Debe tener al menos 8 caracteres y contener un n�mero.");
        } else {
            System.out.println("Contrase�a v�lida");
        }
    }

    public static void main(String[] args) {
        try {
            verificarContrase�a("abcdef");
        } catch (Contrase�aInvalidaException e) {
            System.out.println(e.getMessage());
        }
    }
}
Ejercicio 5:
	Desarrolla un m�todo llamado asignarNota que acepte una nota como par�metro y lance una excepci�n NotaInvalidaException si la nota no est� en el rango de 0 a 10.

class NotaInvalidaException extends Exception {
    public NotaInvalidaException(String mensaje) {
        super(mensaje);
    }
}

public class AsignarNota {
    public static void asignarNota(int nota) throws NotaInvalidaException {
        if (nota < 0 || nota > 10) {
            throw new NotaInvalidaException("La nota debe estar entre 0 y 10.");
        } else {
            System.out.println("Nota asignada: " + nota);
        }
    }

    public static void main(String[] args) {
        try {
            asignarNota(12);
        } catch (NotaInvalidaException e) {
            System.out.println(e.getMessage());
        }
    }
}
